//! Verwaltet Kommunikation zwischen Nodes//consumer Raspi#ifndef NODE_NETWORK_MANAGER#define NODE_NETWORK_MANAGER#include "rclcpp/rclcpp.hpp"#include "std_msgs/msg/string.hpp"//ovde#include <opencv2/opencv.hpp>   // Include OpenCV API#include <cv_bridge/cv_bridge.h>#include "sensor_msgs/msg/image.hpp"#include "sensor_msgs/msg/imu.hpp"#include <fstream>#include <iostream>#include <cstring>#include "nodetemplate/utilities/json/json.hpp"#include "nodetemplate/utilities/base64/base64.h"#include "nodetemplate/metadata/metadata_manager.hpp"#include "nodetemplate/state_machine/lifecycle_state_manager.hpp"#include <memory>#include <functional>#include <cmath>#include <chrono>//for timer#include <unistd.h>class NodeNetworkManager {public:    NodeNetworkManager();    static std::shared_ptr<NodeNetworkManager> GetNodeNetworkManager();    ~NodeNetworkManager();    bool InitiateEndpoints();    bool IsActive();    void SetActive(bool);    void RefreshPnP();    void AnnouncePnP();    void Heartbeat();    void OnNewDependency(Dependency);private:    NodeNetworkManager& operator=(const NodeNetworkManager&);    static std::shared_ptr<NodeNetworkManager> current_manager_;    bool is_active_;    // Publishers    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr pnp_discovery_publisher_;    void pnp_discovery_announce();    void pnp_discovery_search();    bool pnp_should_swap_dependency(std::vector<Dependency>::iterator);    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr heartbeat_publisher_;    rclcpp::TimerBase::SharedPtr heartbeat_publisher_timer_;    void heartbeat_publisher_timer_function();    // Subscribers    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr pnp_discovery_subscriber_;    void pnp_discovery_subscriber_function(const std_msgs::msg::String::SharedPtr);    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr heartbeat_subscriber_;    void pnp_heartbeat_subscriber_function(const std_msgs::msg::String::SharedPtr);    //ovde    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr depth_subscriber;    void depth_callback(const sensor_msgs::msg::Image::SharedPtr);    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr color_subscriber;    void color_callback(const std_msgs::msg::String::SharedPtr);    rclcpp::Subscription<sensor_msgs::msg::Imu>::SharedPtr gyro_subscriber;    void gyro_callback(const sensor_msgs::msg::Imu::SharedPtr);    rclcpp::Subscription<sensor_msgs::msg::Imu>::SharedPtr accel_subscriber;    void accel_callback(const sensor_msgs::msg::Imu::SharedPtr);    //std::chrono::time_point<std::chrono::steady_clock> last_echo;    // Services};#endif